@page "/chat"
@rendermode InteractiveServer
@using System.ComponentModel
@using pp_blazor.ScopedService
@inject ChatService ChatService
@inject IJSRuntime JS

<PageTitle>Chat</PageTitle>

@if (loggedIn)
{
    <h2>Chat</h2>
    @foreach (var chat in chats)
    {
        <span>@chat</span>
        <br />
    }
    <form method="post" @onsubmit="PostMessage" @formname="post-plain-form" style="margin-bottom: 5px;">
        <AntiforgeryToken />
        <InputText @ref=inputTextChat @bind-Value="PostModel!.Message" style="width: 400px;" @onkeydown="HandleKeyDownPost" />
        <button type="submit">Post</button>
    </form>
}
else
{
    <h2>Login</h2>
    <form method="post" @onsubmit="Submit" @formname="login-plain-form"style="margin-bottom: 5px;">
        <AntiforgeryToken />
        User:
        <InputText @ref=inputTextUser @bind-Value="Model!.User" @onkeydown="HandleKeyDownUser" />
        Event:
        <InputText @ref=inputTextEvent @bind-Value="Model!.Event" @onkeydown="HandleKeyDownEvent" />
        <button type="submit">Submit</button>
    </form>
}

@code {
    private int pingId = 0;
    private List<string> chats = new List<string>();
    private int chatsCnt = 0;
    private bool loggedIn = false;

    private InputText inputTextUser;
    private InputText inputTextChat;
    private InputText inputTextEvent;

    protected override void OnInitialized()
    {
        if (ChatService.UserName != null && ChatService.EventTitle != null)
        {
            loggedIn = true;
            pingId = ChatService.PingId;
            chats = ChatService.Chat;
        }
        ChatService.PropertyChanged += UpdatePage;
        Model ??= new();
        PostModel ??= new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (inputTextUser?.Element != null)
            {
                await inputTextUser.Element.Value.FocusAsync();
            }
        }
        else
        {
            if (inputTextChat?.Element != null)
            {
                await inputTextChat.Element.Value.FocusAsync();
            }
        }
    }

    [SupplyParameterFromForm]
    public Login? Model { get; set; }

    [SupplyParameterFromForm]
    public Post? PostModel { get; set; }

    private void Submit()
    {
        if (!string.IsNullOrEmpty(Model?.User) && !string.IsNullOrEmpty(Model?.Event))
        {
            ChatService.UserName = Model?.User;
            ChatService.EventTitle = Model?.Event;
            loggedIn = true;
        }
    }

    private async Task PostMessage()
    {
        if (PostModel?.Message != null)
        {
            ChatService.PostMessage(PostModel?.Message);
            PostModel.Message = "";
        }
    }

    private async Task HandleKeyDownUser(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.CtrlKey && !e.AltKey && !e.ShiftKey)
        {
            await inputTextEvent.Element.Value.FocusAsync();
        }
    }

    private async Task HandleKeyDownEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.CtrlKey && !e.AltKey && !e.ShiftKey)
        {
            if (!string.IsNullOrEmpty(Model?.User))
            {
                Submit();
            }
        }
    }

    private async Task HandleKeyDownPost(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.CtrlKey && !e.AltKey && !e.ShiftKey)
        {
            if (loggedIn)
            {
                PostMessage();
            }
        }
    }

    public class Login 
    {
        public string? User { get; set; }
        public string? Event { get; set; }
    }

    public class Post 
    {
        public string? Message { get; set; }
    }

    private ElementReference scrollContainer;

    private void ScrollToBottom()
    {
        JS.InvokeVoidAsync("scrollToBottom", scrollContainer);
    }

    private async void UpdatePage(object sender, PropertyChangedEventArgs e)
    {
        try
        {
            if (e.PropertyName == nameof(ChatService.PingId))
            {
                pingId = ChatService.PingId;
                await InvokeAsync(StateHasChanged);
            }
            if (e.PropertyName == nameof(ChatService.Chat))
            {
                chats = ChatService.Chat;
                await InvokeAsync(StateHasChanged);
                if (chats.Count != chatsCnt)
                {
                    chatsCnt = chats.Count;
                    ScrollToBottom();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}

